/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.afyachain

enum participantType {
  o MANUFACTURER
  o SUPPLIER
  o RETAILER
}

enum brandStatus {
  o ACTIVE
  o DEACTIVATED
}

enum batchStatus {
  o PRODUCED
  o CODE_PRINTED
  o SUPPLIER_DISPATCHED
  o SUPPLIER_RECEIVED
  o RETAILER_DISPATCHED
  o RETAILER_RECEIVED
  o SOLD
}

enum unitStatus {
  o PRODUCED
  o CODE_PRINTED
  o SUPPLIER_DISPATCHED
  o SUPPLIER_RECEIVED
  o RETAILER_DISPATCHED
  o RETAILER_RECEIVED
  o SOLD
}

//----------------------------Assets----------------------------------------------------------

asset Token identified by code {
  o String code
  o Batch batch optional
  o Unit unit optional
  o DateTime created
  o DateTime updated
  --> ChainParticipant createdBy
  --> ChainParticipant updatedBy
}

participant ChainParticipant identified by email {
  o String email
  o participantType type
  o String name
  o String location optional
  o String phoneNumber
  o String password
  o DateTime created
  o DateTime updated
}

asset Brand identified by brandId {
  o String brandId
  o String name
  o brandStatus status default='ACTIVE'
  // maybe pharmaceuticalForm
  o String mainIngredient
  o String[] ingredients optional
  --> ChainParticipant owner
  o DateTime created
  o DateTime updated
  --> ChainParticipant createdBy
  --> ChainParticipant updatedBy
}

asset Batch identified by code {
  o String code
  o batchStatus status default='PRODUCED'
  --> Brand brand
  o DateTime manufactureDate
  o DateTime expiryDate
  o Integer unitCount
  --> Unit[] units optional
  --> Token token
  --> ChainParticipant owner
  --> ChainParticipant tempOwner optional
  --> Batch parentBatch optional
  o DateTime created
  o DateTime updated
  --> ChainParticipant createdBy
  --> ChainParticipant updatedBy
}

asset Unit identified by code {
  o String code
  o unitStatus status default='PRODUCED'
  o Boolean sold default=false
  --> Batch batch
  --> Token token
  --> ChainParticipant tempOwner optional
  --> ChainParticipant owner
  o DateTime created
  o DateTime updated
  --> ChainParticipant createdBy
  --> ChainParticipant updatedBy
}

// -----------------------------Transactions-----------------------------------------------------

@returns(Batch)
transaction createBatch {
  --> Brand brand
  o DateTime manufactureDate
  o DateTime expiryDate
  o Integer unitCount
  --> Unit[] units optional
  --> ChainParticipant owner
  --> ChainParticipant tempOwner optional
  --> Batch parentBatch optional
  o DateTime created
  --> ChainParticipant user
}

transaction createBrand {
  o String brandId optional
  o String name
  o String mainIngredient
  o String[] ingredients optional
  --> ChainParticipant owner
  o DateTime created optional
  o DateTime updated optional
  --> ChainParticipant user
}

@returns(Token)
transaction createToken {
  o String code optional
  o DateTime created optional
  o DateTime updated optional
  --> ChainParticipant user
}

@returns(ChainParticipant)
transaction createChainParticipant {
  o String email
  o participantType type
  o String name
  o String location optional
  o String phoneNumber
  o String password
  o DateTime created
  o DateTime updated
}

@returns(ChainParticipant)
transaction logIn {
  o String email
  o String password
}

// states play a major role here(strong validation)
// MANUFACTURER
transaction DispatchBatch {
  --> Batch batch
  --> ChainParticipant recipient
  o DateTime dispatchedOn
  --> ChainParticipant user
}

// SUPPLIER
transaction VerifyBatch {
  o String code
  o DateTime verifiedOn
  --> ChainParticipant user
}

transaction ReceiveBatch {
  --> Batch batch
  o DateTime receivedOn
  --> ChainParticipant user
}

transaction SellUnit {
  --> Unit unit
  o DateTime soldOn
  --> ChainParticipant user
}

transaction VerifyUnit {
  o String code
  o String batchCode
  o DateTime verifiedOn
  --> ChainParticipant user
}

transaction ReceiveUnit {
  --> Unit unit
  o DateTime receivedOn
  --> ChainParticipant user
}

// Put a pin in it
transaction SplitBatch {
  --> Batch parentBatch
  o Integer quantity
  --> ChainParticipant user
}
